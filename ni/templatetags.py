"""
Template tags for ni
"""

from django.template import Library, Node, resolve_variable

# pylint: disable=invalid-name
register = Library()

"""
The tag generates a parameter string in form '?param1=val1&param2=val2'.
The parameter list is generated by taking all parameters from current
request.GET and optionally overriding them by providing parameters to the tag.

This is a cleaned up version of http://djangosnippets.org/snippets/2105/. It
solves a couple of issues, namely:
 * parameters are optional
 * parameters can have values from request, e.g. request.GET.foo
 * native parsing methods are used for better compatibility and readability
 * shorter tag name

Usage: place this code in your appdir/templatetags/add_get_parameter.py
In template:
{% load add_get_parameter %}
<a href="{% add_get param1='const' param2=variable_in_context %}">
Link with modified params
</a>

It's required that you have 'django.core.context_processors.request' in
TEMPLATE_CONTEXT_PROCESSORS

Original version's URL: http://django.mar.lt/2010/07/add-get-parameter-tag.html
"""


class AddGetParameter(Node):
    """
    Turns current request query parameters and generates a url with them
    Used for search
    """
    def __init__(self, values):
        self.values = values

    def render(self, context):
        req = resolve_variable('request', context)
        # pylint: disable=no-member
        params = req.GET.copy()
        for key, value in self.values.items():
            params[key] = value.resolve(context)
        return '?%s' % params.urlencode()


@register.tag
def add_get(parser, token):
    """
    outputs a querystring
    """
    pairs = token.split_contents()[1:]
    values = {}
    for pair in pairs:
        key, val = pair.split('=', 1)
        values[key] = parser.compile_filter(val)
    return AddGetParameter(values)
